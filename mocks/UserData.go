// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	user "github.com/playground-pro-project/playground-pro-api/features/user"
	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserData type
type UserData struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserData) Create(_a0 user.UserCore) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(user.UserCore) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.UserCore) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(user.UserCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: userID
func (_m *UserData) DeleteByID(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: userID
func (_m *UserData) GetByID(userID string) (user.UserCore, error) {
	ret := _m.Called(userID)

	var r0 user.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.UserCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) user.UserCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserData) Login(email string, password string) (user.UserCore, string, error) {
	ret := _m.Called(email, password)

	var r0 user.UserCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (user.UserCore, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.UserCore); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateByID provides a mock function with given fields: userID, updatedUser
func (_m *UserData) UpdateByID(userID string, updatedUser user.UserCore) error {
	ret := _m.Called(userID, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, user.UserCore) error); ok {
		r0 = rf(userID, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserData(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
