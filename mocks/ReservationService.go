// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	reservation "github.com/playground-pro-project/playground-pro-api/features/reservation"
	mock "github.com/stretchr/testify/mock"
)

// ReservationService is an autogenerated mock type for the ReservationService type
type ReservationService struct {
	mock.Mock
}

// MakeReservation provides a mock function with given fields: userId, r, p
func (_m *ReservationService) MakeReservation(userId string, r reservation.ReservationCore, p reservation.PaymentCore) (reservation.ReservationCore, reservation.PaymentCore, error) {
	ret := _m.Called(userId, r, p)

	var r0 reservation.ReservationCore
	var r1 reservation.PaymentCore
	var r2 error
	if rf, ok := ret.Get(0).(func(string, reservation.ReservationCore, reservation.PaymentCore) (reservation.ReservationCore, reservation.PaymentCore, error)); ok {
		return rf(userId, r, p)
	}
	if rf, ok := ret.Get(0).(func(string, reservation.ReservationCore, reservation.PaymentCore) reservation.ReservationCore); ok {
		r0 = rf(userId, r, p)
	} else {
		r0 = ret.Get(0).(reservation.ReservationCore)
	}

	if rf, ok := ret.Get(1).(func(string, reservation.ReservationCore, reservation.PaymentCore) reservation.PaymentCore); ok {
		r1 = rf(userId, r, p)
	} else {
		r1 = ret.Get(1).(reservation.PaymentCore)
	}

	if rf, ok := ret.Get(2).(func(string, reservation.ReservationCore, reservation.PaymentCore) error); ok {
		r2 = rf(userId, r, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReservationHistory provides a mock function with given fields: userId
func (_m *ReservationService) ReservationHistory(userId string) ([]reservation.PaymentCore, error) {
	ret := _m.Called(userId)

	var r0 []reservation.PaymentCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]reservation.PaymentCore, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []reservation.PaymentCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservation.PaymentCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReservationStatus provides a mock function with given fields: request
func (_m *ReservationService) ReservationStatus(request reservation.PaymentCore) (reservation.PaymentCore, error) {
	ret := _m.Called(request)

	var r0 reservation.PaymentCore
	var r1 error
	if rf, ok := ret.Get(0).(func(reservation.PaymentCore) (reservation.PaymentCore, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(reservation.PaymentCore) reservation.PaymentCore); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(reservation.PaymentCore)
	}

	if rf, ok := ret.Get(1).(func(reservation.PaymentCore) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationService creates a new instance of ReservationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationService {
	mock := &ReservationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
