// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	review "github.com/playground-pro-project/playground-pro-api/features/review"
	mock "github.com/stretchr/testify/mock"
)

// ReviewService is an autogenerated mock type for the ReviewService type
type ReviewService struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: venueID, userID, _a2
func (_m *ReviewService) CreateReview(venueID string, userID string, _a2 review.ReviewCore) (string, error) {
	ret := _m.Called(venueID, userID, _a2)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, review.ReviewCore) (string, error)); ok {
		return rf(venueID, userID, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, review.ReviewCore) string); ok {
		r0 = rf(venueID, userID, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, review.ReviewCore) error); ok {
		r1 = rf(venueID, userID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: reviewID
func (_m *ReviewService) DeleteByID(reviewID string) error {
	ret := _m.Called(reviewID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByVenueID provides a mock function with given fields: venueID
func (_m *ReviewService) GetAllByVenueID(venueID string) ([]review.ReviewCore, error) {
	ret := _m.Called(venueID)

	var r0 []review.ReviewCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]review.ReviewCore, error)); ok {
		return rf(venueID)
	}
	if rf, ok := ret.Get(0).(func(string) []review.ReviewCore); ok {
		r0 = rf(venueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]review.ReviewCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(venueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReviewService creates a new instance of ReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewService {
	mock := &ReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
