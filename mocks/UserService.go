// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	user "github.com/playground-pro-project/playground-pro-api/features/user"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: userID
func (_m *UserService) DeleteByID(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: userID
func (_m *UserService) GetByID(userID string) (user.UserCore, error) {
	ret := _m.Called(userID)

	var r0 user.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.UserCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) user.UserCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: email
func (_m *UserService) GetUserID(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *UserService) Login(req user.UserCore) (user.UserCore, string, error) {
	ret := _m.Called(req)

	var r0 user.UserCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(user.UserCore) (user.UserCore, string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(user.UserCore) user.UserCore); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	if rf, ok := ret.Get(1).(func(user.UserCore) string); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(user.UserCore) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: req
func (_m *UserService) Register(req user.UserCore) (user.UserCore, string, error) {
	ret := _m.Called(req)

	var r0 user.UserCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(user.UserCore) (user.UserCore, string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(user.UserCore) user.UserCore); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	if rf, ok := ret.Get(1).(func(user.UserCore) string); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(user.UserCore) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SendOTP provides a mock function with given fields: recipientName, toEmailAddr
func (_m *UserService) SendOTP(recipientName string, toEmailAddr string) (string, error) {
	ret := _m.Called(recipientName, toEmailAddr)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(recipientName, toEmailAddr)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(recipientName, toEmailAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(recipientName, toEmailAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreToRedis provides a mock function with given fields: req
func (_m *UserService) StoreToRedis(req user.UserCore) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.UserCore) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByID provides a mock function with given fields: userID, updatedUser
func (_m *UserService) UpdateByID(userID string, updatedUser user.UserCore) error {
	ret := _m.Called(userID, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, user.UserCore) error); ok {
		r0 = rf(userID, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: key, otp
func (_m *UserService) VerifyOTP(key string, otp string) (bool, error) {
	ret := _m.Called(key, otp)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(key, otp)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(key, otp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
